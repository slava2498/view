from django.db import models
from django.shortcuts import reverse
from datetime import datetime
from django.dispatch import receiver
from django.db.models.signals import post_save, pre_delete, m2m_changed
import telebot
from telebot import TeleBot, types
import logging
import math
from astudy.settings import ASTUDY_TOKEN, CABINET_TOKEN, CABINET_START, font

astudy = telebot.TeleBot(ASTUDY_TOKEN)
cabinet = telebot.TeleBot(CABINET_TOKEN)

ROLE = (
    ('customer', '–ó–∞–∫–∞–∑—á–∏–∫'),
    ('executor', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'),
)
TYPE_GRADE = (
    ('one', '–ö–∞—á–µ—Å—Ç–≤–æ'),
    ('two', '–°–∫–æ—Ä–æ—Å—Ç—å'),
    ('three', '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ'),
    ('four', '–í–µ–∂–ª–∏–≤–æ—Å—Ç—å'),
)

class CommonInfo(models.Model):
	date_add = models.DateTimeField(verbose_name="–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", auto_now_add=True)
	date_change = models.DateTimeField(verbose_name="–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", auto_now=True)

	class Meta:
		abstract = True

class Subject(CommonInfo):
	name = models.CharField(verbose_name="–ò–º—è", max_length=100, blank=True, null=True)
	next_subject = models.ManyToManyField('Subject',  verbose_name="–°–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã", blank=True, null=True)
	level = models.IntegerField(verbose_name="–£—Ä–æ–≤–µ–Ω—å", default=1)

	class Meta:
		verbose_name = "–¢–µ–º—ã"
		verbose_name_plural = "–¢–µ–º—ã"

	def __str__(self):
		parent = Subject.objects.filter(next_subject__pk=self.id)
		if(parent): parent = '| –£–∂–µ –≤—ã–±—Ä–∞–Ω–æ –≤ ' + parent[0].name
		else: parent = ''
		return '‚Ññ{} {}, —É—Ä–æ–≤–µ–Ω—å {} {}'.format(self.id, self.name, self.level, parent)

class Files(CommonInfo):
	upload = models.FileField(upload_to='uploads/')

	def __str__(self):
		return '{}.{}'.format(str(self.id), self.upload)

class Clients(CommonInfo):
	refer = models.ForeignKey('Clients', on_delete=models.SET_NULL,
    							verbose_name="–†–µ—Ñ–µ—Ä", blank=True, null=True)
	refer_code = models.CharField(verbose_name="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥", max_length=255, default='')
	chat_id = models.CharField(verbose_name="chat_id", max_length=100)
	name = models.CharField(verbose_name="–ò–º—è", max_length=100, blank=True, null=True)
	city = models.CharField(verbose_name="–ì–æ—Ä–æ–¥", max_length=100, blank=True, null=True)
	more = models.CharField(verbose_name="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", max_length=299, blank=True, null=True)
	filter_subjects = models.ManyToManyField(Subject,  verbose_name="–ü—Ä–µ–¥–º–µ—Ç—ã", blank=True, null=True)
	balance = models.FloatField(verbose_name="–ë–∞–ª–∞–Ω—Å", default=0)
	withdraw = models.TextField(verbose_name="–ö—É–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞", max_length=255, blank=True, null=True)

	bonuse = models.BooleanField(verbose_name="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å", default=False)

	class Meta:
		verbose_name = "–ö–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
		verbose_name_plural = "–ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

	def __str__(self):
		return '{}.{}'.format(self.id, self.chat_id)

@receiver(post_save, sender=Clients)
def refer_client(sender, **kwargs):
	instance = kwargs['instance']
	print(instance)
	if(kwargs['update_fields']): 
		if('refer' in kwargs['update_fields']):
			client = instance
			text = '–ü–æ –≤–∞—à–µ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ññ{}'.format(client.id)
			astudy.send_message(chat_id=client.refer.chat_id, text=text, parse_mode="HTML")



class Tasks(CommonInfo):
	client = models.ForeignKey(Clients, on_delete=models.CASCADE,
								verbose_name="–ó–∞–∫–∞–∑—á–∏–∫", related_name='customer')
	executor = models.ForeignKey(Clients, on_delete=models.CASCADE,
								verbose_name="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", related_name='executor', blank=True, null=True)
	subject = models.ForeignKey(Subject, on_delete=models.CASCADE,
								verbose_name="–¢–µ–º–∞")
	deadline = models.DateTimeField(verbose_name="–î–∞—Ç–∞ —Å–¥–∞—á–∏", blank=True, null=True)
	files = models.ManyToManyField(Files,  verbose_name="–§–∞–π–ª—ã", blank=True, null=True)
	more = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", max_length=255, blank=True, null=True)
	created = models.BooleanField(verbose_name="–°–æ–∑–¥–∞–Ω–∞", default=False)

	state = models.BooleanField(verbose_name="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º", default=False)
	finish = models.BooleanField(verbose_name="–í—ã–ø–æ–ª–Ω–µ–Ω–∞", default=False)

	price_one = models.FloatField(verbose_name="–¶–µ–Ω–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞", default=0)
	price_two = models.FloatField(verbose_name="–¶–µ–Ω–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π –∑–∞–∫–∞–∑—á–∏–∫–∞", default=0)

	class Meta:
		verbose_name = "–ó–∞–¥–∞—á–∏"
		verbose_name_plural = "–ó–∞–¥–∞—á–∏"

	def __str__(self):
		return '{}.{} {}'.format(self.id, self.client, self.subject.name)

@receiver(post_save, sender=Tasks)
def update_task(sender, **kwargs):
	instance = kwargs['instance']
	print(instance)
	if(kwargs['update_fields']): 
		if('created' in kwargs['update_fields']):
			task = instance
			subject = task.subject
			clients = Clients.objects.filter(filter_subjects=subject).exclude(id=instance.client.id)
			keyboard = types.InlineKeyboardMarkup(True)
			keyboard.keyboard.append([{'text': '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'callback_data': 'EXECUTOR100_' + str(task.id)}])
			text = 'üí£ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {} ({})'.format(font('bold', '#{} {}'.format(task.id, task.subject.name)), (task.more[:20] + '...') if len(task.more) > 20 else task.more)
			for x in clients:
				try:
					astudy.send_message(chat_id=x.chat_id, text=text, reply_markup=keyboard, parse_mode="HTML")
				except:
					pass

		elif('more' in kwargs['update_fields']):
			task = instance
			subject = task.subject
			feedbacks = Feedback.objects.filter(task=task)
			if('more' in kwargs['update_fields']):
				text = '‚ö†Ô∏è –ó–∞–∫–∞–∑—á–∏–∫ –∏–∑–º–µ–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {}\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∞–Ω—É–ª–ª–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ—Å–∏–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'.format(font('bold', '#{} {}'.format(task.id, task.subject.name)))

			keyboard = types.InlineKeyboardMarkup(True)
			keyboard.keyboard.append([{'text': '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'callback_data': 'EXECUTOR100_' + str(task.id)}])
			for x in feedbacks:
				astudy.send_message(chat_id=x.client.chat_id, text=text, reply_markup=keyboard, parse_mode="HTML")

			feedbacks.delete()

		elif('executor' in kwargs['update_fields'] and instance.executor is not None):
			task = instance
			keyboard = types.InlineKeyboardMarkup(True)
			buttons = []
			# keyboard.keyboard.append([{'text': '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'callback_data': 'EXECUTOR150_' + str(task.id) + '_____'}])
			buttons.append({'text': '–î–∞ ‚úÖ', 'callback_data': 'EXECUTOR160_' + str(task.id) + '_yes____'})
			buttons.append({'text': '–ù–µ—Ç ‚ùå', 'callback_data': 'EXECUTOR160_' + str(task.id) + '_no____'})
			f = lambda A, n: [A[i:i+n] for i in range(0, len(A), n)]
			keyboard.keyboard = f(buttons, 1)
			text = '‚úÖ –í–∞—Å –≤—ã–±—Ä–∞–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞ –∑–∞–∫–∞–∑ {}\n'.format(font('bold', '#{}-{}'.format(task.id, task.subject.name)))
			text += str(font('light', '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è?'))
			astudy.send_message(chat_id=task.executor.chat_id, text=text, reply_markup=keyboard, parse_mode="HTML")

		elif('finish' in kwargs['update_fields']):
			task = instance
			executor = Clients.objects.filter(id=instance.executor.id)[0]
			feedback = Feedback.objects.filter(task=task, client=executor)[0]
			price_executor = feedback.price_one
			if(task.client.refer):
				refer = Clients.objects.filter(id=task.client.refer.id)[0]
				comission = Commissions.objects.filter()[0]
				price_refer = task.price_two - task.price_two * comission.amount_three
				refer.balance = price_refer
				refer.save(update_fields=['balance'])
				cabinet.send_message(chat_id=refer.chat_id, text='–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: {} –≥—Ä–Ω.'.format(math.ceil(price_executor)), parse_mode="HTML")

			executor.balance += price_executor
			executor.save(update_fields=['balance'])
			text = font('bold', '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º üéâüéâüéâ —Å —É—Å–ø–µ—à–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞, ') + '–≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {}\n'.format(font('bold', '{} –≥—Ä–Ω.'.format(math.ceil(price_executor))))
			text += '–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏! '
			text += font('light', '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∏–¥–µ–∏, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å, –ø–∏—à–∏—Ç–µ @Viktor_Rachuk')
			cabinet.send_message(chat_id=instance.executor.chat_id, text=text, parse_mode="HTML")

			keyboard_customer = types.InlineKeyboardMarkup(True)
			keyboard_executor = types.InlineKeyboardMarkup(True)
			star = '‚≠êÔ∏è'
			cabinet_customer = Cabinet.objects.filter(task=task, role='customer')[0]
			cabinet_executor = Cabinet.objects.filter(task=task, role='executor')[0]
			for x in range(5):
				# keyboard_customer.keyboard.append([{'text': star, 'callback_data': 'CABINET121_' + str(cabinet_customer.id) + '_customer_' + str(x)}])
				keyboard_executor.keyboard.append([{'text': star, 'callback_data': 'CABINET121_' + str(cabinet_executor.id) + '_executor_' + str(x)}])
				star += '‚≠êÔ∏è'

			answer = '–û—Ü–µ–Ω–∏—Ç–µ ' + font('bold', '–∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã')
			cabinet.send_message(chat_id=instance.client.chat_id, text=answer, reply_markup=keyboard_executor, parse_mode="HTML")
			# cabinet.send_message(chat_id=instance.executor.chat_id, text=answer, reply_markup=keyboard_customer)

def toppings_changed(sender, **kwargs):
	task = kwargs['instance']
	subject = task.subject
	text = '‚ö†Ô∏è –ó–∞–∫–∞–∑—á–∏–∫ –∏–∑–º–µ–Ω–∏–ª —Ñ–∞–π–ª—ã –∫ –∑–∞–¥–∞—á–µ {}\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∞–Ω—É–ª–ª–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ—Å–∏–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'.format(font('bold', '#{} {}'.format(task.id, task.subject.name)))
	keyboard = types.InlineKeyboardMarkup(True)
	keyboard.keyboard.append([{'text': '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'callback_data': 'EXECUTOR100_' + str(task.id)}])
	feedbacks = Feedback.objects.filter(task=task)
	for x in feedbacks:
		astudy.send_message(chat_id=x.client.chat_id, text=text, reply_markup=keyboard, parse_mode="HTML")

	feedbacks.delete()

m2m_changed.connect(toppings_changed, sender=Tasks.files.through)

@receiver(pre_delete, sender=Tasks)
def delete_model(sender, **kwargs):
	task = kwargs['instance']
	subject = task.subject
	clients = Feedback.objects.filter(task=task)
	text = '–ó–∞–∫–∞–∑—á–∏–∫ —É–¥–∞–ª–∏–ª –∑–∞–∫–∞–∑ {}\n'.format(font('bold', '#{} {}'.format(task.id, subject.name)))
	for x in clients:
		if(task.client.id != x.id):
			try:
				astudy.send_message(chat_id=x.client.chat_id, text=text, parse_mode="HTML")
			except:
				pass

class Feedback(CommonInfo):
	client = models.ForeignKey(Clients, on_delete=models.CASCADE,
								verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
	task = models.ForeignKey(Tasks, on_delete=models.CASCADE,
								verbose_name="–ó–∞–¥–∞—á–∞")
	question = models.TextField(verbose_name="–í–æ–ø—Ä–æ—Å", max_length=255, blank=True, null=True)
	price_one = models.FloatField(verbose_name="–¶–µ–Ω–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", default=0)
	price_two = models.FloatField(verbose_name="–¶–µ–Ω–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", default=0)
	created = models.BooleanField(verbose_name="–°–æ–∑–¥–∞–Ω–∞", default=False)
	state = models.BooleanField(verbose_name="–°—Ç–∞—Ç—É—Å", default=True)

	class Meta:
		verbose_name = "–ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–¥–∞—á—É"
		verbose_name_plural = "–ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–¥–∞—á—É"

	def __str__(self):
		return '{}|{}'.format(self.client, self.task.id)

@receiver(post_save, sender=Feedback)
def update_feedback(sender, **kwargs):
	from bot.classes.task import TaskClass
	instance = kwargs['instance']
	if(kwargs['update_fields']):
		if('created' in kwargs['update_fields']):
			feedback = instance
			task = TaskClass(feedback.task.client)
			task.preview_feedback(feedback.id)
			astudy.send_message(chat_id=task.client.chat_id, text=task.answer, reply_markup=task.keyboard, parse_mode="HTML")

class Review(CommonInfo):
	castomer = models.ForeignKey(Clients, on_delete=models.CASCADE,
								verbose_name="–ó–∞–∫–∞–∑—á–∏–∫", blank=True, null=True, related_name='customer_review')
	executor = models.ForeignKey(Clients, on_delete=models.CASCADE,
								verbose_name="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", blank=True, null=True, related_name='executor_review')
	task = models.ForeignKey(Tasks, on_delete=models.CASCADE,
								verbose_name="–ó–∞–¥–∞—á–∞")
	message = models.TextField(verbose_name="–°–æ–æ–±—â–µ–Ω–∏–µ")

	class Meta:
		verbose_name = "–û—Ç–∑—ã–≤—ã"
		verbose_name_plural = "–û—Ç–∑—ã–≤—ã"

	def __str__(self):
		return '{}|{}'.format(self.castomer if self.executor is None else self.executor, self.task.id)

class Assessment(CommonInfo):
	castomer = models.ForeignKey(Clients, on_delete=models.CASCADE,
								verbose_name="–ó–∞–∫–∞–∑—á–∏–∫", blank=True, null=True, related_name='customer_asse')
	executor = models.ForeignKey(Clients, on_delete=models.CASCADE,
								verbose_name="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", blank=True, null=True, related_name='executor_asse')
	task = models.ForeignKey(Tasks, on_delete=models.CASCADE,
								verbose_name="–ó–∞–¥–∞—á–∞")
	grade = models.IntegerField(verbose_name="–û—Ü–µ–Ω–∫–∞")
	type_grade = models.CharField(verbose_name="–¢–∏–ø –æ—Ü–µ–Ω–∫–∏", max_length=50, choices=TYPE_GRADE, blank=True, null=True)

	class Meta:
		verbose_name = "–û—Ü–µ–Ω–∫–∏"
		verbose_name_plural = "–û—Ü–µ–Ω–∫–∏"

	def __str__(self):
		return '{}|{}'.format(self.castomer if self.executor is None else self.executor, self.task.id)


class Preview_message(CommonInfo):
	customer = models.ForeignKey(Clients, on_delete=models.CASCADE,
								verbose_name="–ó–∞–∫–∞–∑—á–∏–∫", blank=True, null=True, related_name='customer_message')
	executor = models.ForeignKey(Clients, on_delete=models.CASCADE,
								verbose_name="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", blank=True, null=True, related_name='executor_message')
	task = models.ForeignKey(Tasks, on_delete=models.CASCADE,
								verbose_name="–ó–∞–¥–∞—á–∞")
	message = models.TextField(verbose_name="–°–æ–æ–±—â–µ–Ω–∏–µ")
	state = models.BooleanField(verbose_name="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", default=False)

	class Meta:
		verbose_name = "–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ"
		verbose_name_plural = "–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ"

	def __str__(self):
		return '{}|{}'.format(self.customer if self.executor is None else self.executor, self.task.id)


class Cabinet(CommonInfo):
	client = models.ForeignKey(Clients, on_delete=models.CASCADE,
								verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
	role = models.CharField(verbose_name="–†–æ–ª—å", max_length=50, choices=ROLE)
	task = models.ForeignKey(Tasks, on_delete=models.CASCADE,
								verbose_name="–ó–∞–¥–∞—á–∞")
	active = models.BooleanField(verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–±–∏–Ω–µ—Ç–µ", default=False)
	state = models.BooleanField(verbose_name="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è", default=True)
	grade = models.BooleanField(verbose_name="–û—Ü–µ–Ω–∏–≤–∞–µ—Å—è", default=False)

	class Meta:
		verbose_name = "–ö–∞–±–∏–Ω–µ—Ç"
		verbose_name_plural = "–ö–∞–±–∏–Ω–µ—Ç"

	def __str__(self):
		return '{} {} {} {} {}'.format(self.client, self.role, self.task.id, self.active, self.state)

class Cabinetmessage(CommonInfo):
	cabinet_record = models.ForeignKey(Cabinet, on_delete=models.CASCADE,
								verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
	message = models.TextField(verbose_name="–°–æ–æ–±—â–µ–Ω–∏–µ", blank=True, null=True)
	file = models.ForeignKey(Files, verbose_name="–§–∞–π–ª", blank=True, null=True, on_delete=models.CASCADE)
	state = models.BooleanField(verbose_name="–ü—Ä–æ—á–∏—Ç–∞–Ω–æ", default=False)

	class Meta:
		verbose_name = "–°–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–±–∏–Ω–µ—Ç–µ"
		verbose_name_plural = "–°–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–±–∏–Ω–µ—Ç–µ"

	def __str__(self):
		return '{} {}'.format(self.cabinet_record.id, self.message)

@receiver(post_save, sender=Cabinet)
def create_cabinet(sender, **kwargs):
	from bot.classes.task import TaskClass
	instance = kwargs['instance']
	created = kwargs['created']
	if(created):
		answer_1 = CABINET_START
		answer_2 = font('bold', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∑–∞–∫–∞–∑ –∏ –æ–∂–∏–¥–∞–π—Ç–µ {} ‚è≥'.format('–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' if instance.role == 'customer' else '–∑–∞–∫–∞–∑—á–∏–∫–∞'))

		try:
			cabinet.send_message(chat_id=instance.client.chat_id, text=answer_1, parse_mode="HTML", disable_web_page_preview=True)
		except:
			pass
		try:
			cabinet.send_message(chat_id=instance.client.chat_id, text=answer_2, parse_mode="HTML")
		except:
			pass
	elif(kwargs['update_fields'] and 'active' in kwargs['update_fields']):
		role_interlocutor = 'customer' if instance.role == 'executor' else 'executor'
		cabinet_record = Cabinet.objects.filter(task=instance.task, role=role_interlocutor)
		if(instance.active):
			Cabinetmessage.objects.filter(cabinet_record__task=instance.task, cabinet_record__role=role_interlocutor).update(state=True)

			if(cabinet_record[0].active):
				answer_2 = font('bold', '{} –∑–∞—à—ë–ª –≤ –∫–∞–±–∏–Ω–µ—Ç üë®'.format('–ó–∞–∫–∞–∑—á–∏–∫' if instance.role == 'customer' else '–ü–æ–º–æ—â–Ω–∏–∫'))
				cabinet.send_message(chat_id=cabinet_record[0].client.chat_id, text=answer_2, parse_mode="HTML")
				answer_1 = '–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É\n{} —É–∂–µ —Ç—É—Ç ‚úÖ'.format('–ø–æ–º–æ—â–Ω–∏–∫' if instance.role == 'customer' else '–∑–∞–∫–∞–∑—á–∏–∫')
			else:
				answer_1 = '–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É'

			from bot.classes.stairs import Stairs
			stairs = Stairs(None, None)
			keyboard = types.ReplyKeyboardMarkup(True)
			f = lambda A, n: [A[i:i+n] for i in range(0, len(A), n)]
			if(instance.role == 'customer'):
				keyboard.keyboard = f(stairs.buttons_cabinetcustomer, 2)
			else:
				keyboard.keyboard = f(stairs.buttons_cabinetexecutor, 2)
			cabinet.send_message(chat_id=instance.client.chat_id, text=answer_1, parse_mode="HTML", reply_markup=keyboard)

	elif(kwargs['update_fields'] and 'state' in kwargs['update_fields']):
		role_interlocutor = 'customer' if instance.role == 'executor' else 'executor'
		cabinet_record = Cabinet.objects.filter(task=instance.task, role=role_interlocutor, state=True)
		if(cabinet_record):
			answer = font('bold', '‚ÄºÔ∏è –ü–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ –∑–∞–∫–∞–∑—É #{}\n'.format(instance.task.id))
			answer += font('light', '‚ö†Ô∏è –ù–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ–∫–∞ –µ–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –£ –≤–∞—Å –µ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 10 –¥–Ω–µ–π –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–º–æ—â–Ω–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —Ä–∞–±–æ—Ç—ã')
			keyboard = types.InlineKeyboardMarkup(True)
			keyboard.keyboard.append([{'text': '–ü—Ä–∏–Ω—è—Ç—å ‚úÖ', 'callback_data': 'CABINET110_{}_{}'.format(cabinet_record[0].id, 'yes')}])
			keyboard.keyboard.append([{'text': '–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå', 'callback_data': 'CABINET110_{}_{}'.format(cabinet_record[0].id, 'no')}])
			cabinet.send_message(chat_id=cabinet_record[0].client.chat_id, text=answer, reply_markup=keyboard, parse_mode="HTML")
		else:
			task = Tasks.objects.filter(id=instance.task.id)[0]
			task.finish = True
			task.save(update_fields=['finish'])
			


class Deadlines(CommonInfo):
	name = models.CharField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ", max_length=100, blank=True, null=True)
	days = models.IntegerField(verbose_name="–î–Ω–∏", default=1)

	class Meta:
		verbose_name = "–°—Ä–æ–∫–∏"
		verbose_name_plural = "–°—Ä–æ–∫–∏"

	def __str__(self):
		return '{}'.format(self.name)

class Withdrawal(CommonInfo):
	client = models.ForeignKey(Clients, on_delete=models.CASCADE,
								verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
	amount_one = models.FloatField(verbose_name="–°—É–º–º–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏", default=0)
	amount_two = models.FloatField(verbose_name="–°—É–º–º–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π", default=0)
	state = models.BooleanField(verbose_name="–°—Ç–∞—Ç—É—Å", default=False)

	class Meta:
		verbose_name = "–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"
		verbose_name_plural = "–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"

	def __str__(self):
		return '{}|{}'.format(self.client, '–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞' if self.state else '–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞')


class Payliq(CommonInfo):
	client = models.ForeignKey(Clients, on_delete=models.CASCADE,
								verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
	amount_one = models.FloatField(verbose_name="–°—É–º–º–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏", default=0)
	amount_two = models.FloatField(verbose_name="–°—É–º–º–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π", default=0)
	token = models.CharField(verbose_name="–¢–æ–∫–µ–Ω", max_length=200, blank=True, null=True)
	state = models.BooleanField(verbose_name="–°—Ç–∞—Ç—É—Å", default=False)

	class Meta:
		verbose_name = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
		verbose_name_plural = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"

	def __str__(self):
		return '{} {}'.format(self.client, self.token)

class Commissions(CommonInfo):
	amount_one = models.FloatField(verbose_name="–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", default=1)
	amount_two = models.FloatField(verbose_name="–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥", default=1)
	amount_three = models.FloatField(verbose_name="–ö–æ–º–∏—Å—Å–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞", default=1)
	amount_four = models.FloatField(verbose_name="–ö–æ–º–∏—Å—Å–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", default=1)

	class Meta:
		verbose_name = "–ö–æ–º–∏—Å—Å–∏—è"
		verbose_name_plural = "–ö–æ–º–∏—Å—Å–∏—è"

class DialogControll(CommonInfo):
	client = models.ForeignKey(Clients, on_delete=models.CASCADE,
									verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
	data = models.TextField(verbose_name="–î–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ jsons")
	bot = models.CharField(verbose_name="–ë–æ—Ç", max_length=200, blank=True, null=True)

	class Meta:
		verbose_name = "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"
		verbose_name_plural = "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã"

	def __str__(self):
		return '{}'.format(self.client)