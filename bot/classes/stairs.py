# -*- coding: utf-8 -*-
import datetime
from bot.models import *
from bot.classes.subject import SubjectClass
from bot.classes.task import TaskClass
from django.core.exceptions import ObjectDoesNotExist
from django.utils import timezone
from telebot import types
from telebot.types import InputMediaPhoto, InputMediaVideo
from datetime import datetime, date, timedelta
from django.core.exceptions import ObjectDoesNotExist
from django.core.files import File
from django.core.files.base import ContentFile
import os
import math
from astudy.settings import font, constructor, search_list, REFERAL_TEXT, SUPPORT_TEXT, INFO_TEXT

class Stairs:

	def __init__(self, user, bot):
		self.COUNT_ROW = 2
		self.user = user
		if(user is None):
			self.client = None
			self.dialog = None
		else:
			self.client = self.user.client
			self.dialog = self.user.dialog
		self.telegram_bot = bot
		self.delete_dialog = False
		self.data_dialog = ''
		self.answer = ''

		self.buttons_start = ['–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚ûï',
								'–ú–æ–π –±–∞–ª–∞–Ω—Å üí∞',
								'–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìù',
								'–ü–æ–º–æ—â—å üíª',
								'–ú–µ–Ω—é –ø–æ–º–æ—â–Ω–∏–∫–∞ üéì'
								]

		# self.buttons_customer = ['–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚ûï',
		# 						'–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìù',
		# 						'–ù–∞–∑–∞–¥ ‚Ü©Ô∏è',
		# 						]

		self.buttons_executor = ['–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ üîç',
								'–ú–æ–∏ –∑–∞–∫–∞–∑—ã üë®',
								'–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üóÇ',
								'–ü—Ä–æ—Ñ–∏–ª—å üìñ',
								'–ù–∞–∑–∞–¥ ‚Ü©Ô∏è',
								]

		self.buttons_cabinetcustomer = ['–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑ üîñ',
								'–ò—Å—Ç–æ—Ä–∏—è üí¨',
								'–ù–∞–≤–∏–≥–∞—Ü–∏—è üï∏',
								]

		self.buttons_cabinetexecutor = ['–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑ üîñ',
								'–ò—Å—Ç–æ—Ä–∏—è üí¨',
								'–ù–∞–≤–∏–≥–∞—Ü–∏—è üï∏',
								'–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ ‚òëÔ∏è',
								]

		self.keyboard_cancel = types.InlineKeyboardMarkup(True)
		self.keyboard_cancel.keyboard = constructor([{'text': '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', 'callback_data': 'USER888'}], 1)

	def isint(self, s):
		try:
			int(s)
			return True
		except ValueError:
			return False

	def isfloat(self, s):
		try:
			float(s)
			return True
		except ValueError:
			return False

	def between(self, message, a, b):
		if not (a <= float(message) <= b):
			self.answer = '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {} –¥–æ {}'.format(a, b)
			return False
		return True

	def len_string(self, message, a):
		if (len(message) > a):
			self.answer = '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {} —Å–∏–º–≤–æ–ª–æ–≤'.format(a)
			return False
		return True

	def font(self, type_font, message):
		font_array = {'bold': '<b>' + str(message) + '</b>', 'light': '<i>' + str(message) + '</i>'}
		return font_array[type_font]

	def quick_response(self, message, data=None):
		if(self.telegram_bot.get_me().username == 'Shpargalochka_bot'):
			if(message == '/start'):
				self.answer = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
				keyboard = types.ReplyKeyboardMarkup(True)
				keyboard.keyboard = constructor(self.buttons_start, self.COUNT_ROW)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=keyboard)
			elif(message == '–ø—Ä–æ—Ñ–∏–ª—å üìñ'):
				self.user.card_raiting()
				self.answer = '{}\n–ò–º—è: {}\n–°—Ç—Ä–∞–Ω–∞: {}\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –º–Ω–µ: {}\n–ö—É–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä-–≤–∞: {}\nüíé–†–µ–π—Ç–∏–Ω–≥: {} ({})\nüèÜ–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–±–æ—Ç: {}\n'.format(
								font('bold', 'üî•–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ üî•'),
								font('bold', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if not self.client.name else self.client.name),
								font('bold', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if not self.client.city else self.client.city),
								font('bold', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if not self.client.more else self.client.more),
								font('bold', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if not self.client.withdraw else self.client.withdraw),
								font('bold', self.user.star),
								font('bold', self.user.assessment),
								font('bold', self.user.count_work)
							)

				self.answer += font('light', '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏\n–ù–∞–∂–º–∏—Ç–µ {}, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ'.format(font('bold', '¬´‚Äé–ü—Ä–∏–º–µ–Ω–∏—Ç—å¬ª')))
				keyboard = types.InlineKeyboardMarkup(True)

				buttons = []
				buttons.append({'text': '–ò–º—è', 'callback_data': 'USER100'})
				buttons.append({'text': '–ì–æ—Ä–æ–¥', 'callback_data': 'USER101'})
				buttons.append({'text': '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'callback_data': 'USER102'})
				buttons.append({'text': '–í—ã–≤–æ–¥', 'callback_data': 'USER103'})

				keyboard.keyboard = constructor(buttons, self.COUNT_ROW)

				if(data):
					try:
						self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=data.message.message_id, parse_mode="HTML", text=self.answer, reply_markup=keyboard)
					except:
						pass
				else:
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=keyboard)

			elif(message == '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üóÇ'):
				self.answer = '{}\n{}'.format(font('bold', 'üóÇ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'), font('light', '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å'))
				keyboard = types.InlineKeyboardMarkup(True)

				buttons = []
				subject_class = SubjectClass()
				for x in subject_class.subjects.filter(level=1):
					buttons.append({'text': x.name, 'callback_data': 'SUBJECT100_{}_1_{}'.format(x.id, x.id)})

				keyboard.keyboard = constructor(buttons, self.COUNT_ROW)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=keyboard)

			elif(message == '–º–µ–Ω—é –ø–æ–º–æ—â–Ω–∏–∫–∞ üéì'):
				self.answer = '–ú–µ–Ω—é –ø–æ–º–æ—â–Ω–∏–∫–∞'
				use_buttons = self.buttons_executor
				keyboard = types.ReplyKeyboardMarkup(True)
				keyboard.keyboard = constructor(use_buttons, self.COUNT_ROW)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=keyboard)
			# elif(message in ['–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–∑–∞–∫–∞–∑—á–∏–∫']):
			# 	if('–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å' in message):
			# 		self.answer = '–ú–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
			# 		use_buttons = self.buttons_executor
			# 	else:
			# 		self.answer = '–ú–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞'
			# 		use_buttons = self.buttons_customer

			# 	keyboard = types.ReplyKeyboardMarkup(True)
			# 	f = lambda A, n: [A[i:i+n] for i in range(0, len(A), n)]
			# 	keyboard.keyboard = f(use_buttons, self.COUNT_ROW)
			# 	self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=keyboard)

			elif(message == '–º–æ–π –±–∞–ª–∞–Ω—Å üí∞'):
				self.user.withdrawal_list()
				self.answer = '–í–∞—à –±–∞–ª–∞–Ω—Å: {}\n–û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞ –≤—ã–≤–æ–¥: {}'.format(font('bold', '{} –≥—Ä–Ω'.format(math.ceil(self.client.balance))), font('bold', '{} –≥—Ä–Ω'.format(math.ceil(self.user.withdrawal_sum['amount_two__sum'] if self.user.withdrawal_sum['amount_two__sum'] else 0))))
				buttons = []
				buttons.append({'text': '–ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'callback_data': 'BALANCE100'})
				buttons.append({'text': '–í—ã–≤–µ—Å—Ç–∏', 'callback_data': 'BALANCE101'})
				buttons.append({'text': '–†–µ—Ñ–µ—Ä–∞–ª–∫–∞', 'callback_data': 'BALANCE120'})

				keyboard = types.InlineKeyboardMarkup(True)
				keyboard.keyboard = constructor(buttons, self.COUNT_ROW)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=keyboard)

			elif(message == '–Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚ûï'):
				self.answer = font('bold', '–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–∫–∞–∑–∞\n')
				self.answer += font('light', '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—Ä–µ–¥–º–µ—Ç')
				keyboard = types.InlineKeyboardMarkup(True)

				buttons = []
				subject_class = SubjectClass()
				for x in subject_class.subjects.filter(level=1):
					buttons.append({'text': x.name, 'callback_data': 'CUSTOMER100_{}_1_{}'.format(x.id, x.id)})

				keyboard.keyboard = constructor(buttons, self.COUNT_ROW)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=keyboard)
			
			elif(message == '–Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ üîç'):
				task = TaskClass(self.client, 'EXECUTOR')
				task.select_task()

				if(data):
					self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=data.message.message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)
				else:
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=task.answer, parse_mode='HTML', reply_markup=task.keyboard)

			elif(message == '–º–æ–∏ –∑–∞–∫–∞–∑—ã üìù'):
				task = TaskClass(self.client, 'CUSTOMERSEARCH')
				task.select_task()
				if(data):
					self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=data.message.message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)
				else:
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=task.answer, parse_mode='HTML', reply_markup=task.keyboard)
			
			elif(message == '–º–æ–∏ –∑–∞–∫–∞–∑—ã üë®'):
				task = TaskClass(self.client, 'EXECUTORSEARCH')
				task.select_task()
				if(data):
					self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=data.message.message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)
				else:
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=task.answer, parse_mode='HTML', reply_markup=task.keyboard)

			elif(message == '–ø–æ–º–æ—â—å üíª'):
				self.answer = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å @Viktor_Rachuk\n\n' + SUPPORT_TEXT
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', disable_web_page_preview=True)

			elif(message == '–Ω–∞–∑–∞–¥ ‚Ü©Ô∏è'):
				self.quick_response('/start', data)

			elif(message == '/info'):
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=INFO_TEXT, parse_mode='HTML')

			else:
				self.answer = '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é ‚òπÔ∏è'
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML')
		
		elif(self.telegram_bot.get_me().username == 'ShpargalochkaCab_bot'):
			task = TaskClass(self.client, 'CABINET')
			if(task.task):
				if(message in str(self.buttons_cabinetcustomer).lower() or message in str(self.buttons_cabinetexecutor).lower() or message in ['/start','/info']):
					self.user.role_task()
					if(message == '/start'):
						self.answer = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
						keyboard = types.ReplyKeyboardMarkup(True)
						self.user.role_task()
						if(self.user.role == 'customer'): keyboard.keyboard = constructor(self.buttons_cabinetcustomer, self.COUNT_ROW)
						elif(self.user.role == 'executor'): keyboard.keyboard = constructor(self.buttons_cabinetexecutor, self.COUNT_ROW)
						self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=keyboard)

					elif(message == '/info'):
						self.answer = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
						self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML')
					
					elif(message == '–ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑ üîñ'):
						task.show_task()
						self.telegram_bot.send_message(chat_id=self.client.chat_id, text=task.answer, parse_mode='HTML', reply_markup=task.keyboard)

					elif(message == '–∏—Å—Ç–æ—Ä–∏—è üí¨'):
						task.message_list()
						self.telegram_bot.send_message(chat_id=self.client.chat_id, text=task.answer, parse_mode='HTML')

					elif(message == '–Ω–∞–≤–∏–≥–∞—Ü–∏—è üï∏'):
						task.task_list()
						self.telegram_bot.send_message(chat_id=self.client.chat_id, text=task.answer, parse_mode='HTML', reply_markup=task.keyboard)

					elif(message == '–∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ ‚òëÔ∏è' and self.user.role == 'executor'):
						self.answer = font('bold', '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ #{}?\n'.format(task.task.id))
						self.answer += font('light', '‚ö†Ô∏è –£ –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 10 –¥–Ω–µ–π –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö, –æ–Ω –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –≤–∞—Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —Ä–∞–±–æ—Ç—ã')
						buttons = []
						buttons.append({'text': '–î–∞ ‚úÖ', 'callback_data': 'CABINET110_{}_{}'.format(task.cabinet.id, 'yes')})
						buttons.append({'text': '–ù–µ—Ç ‚ùå', 'callback_data': 'USER888'})
						self.keyboard = types.InlineKeyboardMarkup(True)
						self.keyboard.keyboard = constructor(buttons, 1)
						self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard)
				else:
					if(not self.len_string(message, 500)):
						self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
						return

					task.message_cabinet(message)
					if(task.answer): self.telegram_bot.send_message(chat_id=task.chat_id, text=task.answer, parse_mode='HTML')
			else:
				task.task_list()
				if(task.keyboard.keyboard):
					text = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É'
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=text, parse_mode='HTML', reply_markup=task.keyboard)
				else:
					text = '–ó–∞–¥–∞—á –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=text, parse_mode='HTML')
	
	def callback_response(self, data, call='outside'):
		if(call == 'inside'):
			step = data['step']
			message_id = data['message_id']
		else:
			step = data.data
			message_id = data.message.message_id
		print(199,step.split('_'))
		# if(self.telegram_bot.get_me().username == 'autotextbackbot'):
		if('USER' in step):
			if(step == 'USER777'):
				self.quick_response('–ø—Ä–æ—Ñ–∏–ª—å üìñ', data)
				self.delete_dialog = True

			elif(step == 'USER888'):
				self.answer = '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer)
				self.delete_dialog = True

			elif(step == 'USER100'):
				self.answer = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è'
				self.data_dialog = step + '|' + str(message_id)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard_cancel)

			elif(step == 'USER101'):
				self.answer = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥'
				self.data_dialog = step + '|' + str(message_id)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard_cancel)

			elif(step == 'USER102'):
				self.answer = '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ'
				self.data_dialog = step + '|' + str(message_id)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard_cancel)
			
			elif(step == 'USER103'):
				self.answer = '–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã –∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã'
				self.data_dialog = step + '|' + str(message_id)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard_cancel)
	
		elif('BALANCE' in step):
			if(step == 'BALANCE100'):
				self.answer += '–ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ {}, –≤–≤–µ–¥–∏—Ç–µ {}, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (–æ—Ç 10 –¥–æ 5000 –≥—Ä–Ω)\n'.format(font('bold', '<a href="#">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è</a>'), font('bold', '—Å—É–º–º—É'))
				self.data_dialog = 'BALANCE100' + '|' + str(message_id)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard_cancel, disable_web_page_preview=True)
			elif(step == 'BALANCE101'):
				if(not self.client.withdraw):
					self.answer = '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –í—ã–≤–æ–¥–µ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ'
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
					return

				self.answer = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ (*–æ—Ç 10 –¥–æ 1000 –≥—Ä–Ω*)'
				self.data_dialog = 'BALANCE101' + '|' + str(message_id)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard_cancel)
			elif(step == 'BALANCE120'):
				buttons = []
				self.answer = ''
				if(not self.client.refer):
					self.answer += REFERAL_TEXT
					buttons.append({'text': '–í–≤–µ—Å—Ç–∏ –∫–æ–¥', 'callback_data': 'BALANCE121'})
				buttons.append({'text': '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥', 'callback_data': 'BALANCE122'})

				keyboard = types.InlineKeyboardMarkup(True)
				keyboard.keyboard = constructor(buttons, self.COUNT_ROW)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=keyboard)

			elif(step == 'BALANCE121'):
				self.answer = '–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥'
				self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard_cancel)
				self.data_dialog = 'BALANCE121' + '|' + str(message_id)
				

			elif(step == 'BALANCE122'):
				self.answer = self.client.refer_code
				self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=self.answer)

		elif('EXECUTOR' in step or 'CUSTOMERSEARCH' in step or 'FEEDBACK' in step):
			first_data = step.split('_')[1]
			print(367, step)
			if('EXECUTOR100' in step or 'EXECUTOR110' in step or 'CUSTOMERSEARCH110' in step):
				id_task = first_data
				if('EXECUTOR100' in step):
					self.delete_dialog = True
					task = TaskClass(self.client, 'EXECUTOR', id_task)
					task.show_task()
				elif('EXECUTOR110' in step):
					task = TaskClass(self.client, 'EXECUTOR', id_task)
					task.show_task(search=True)
				elif('CUSTOMERSEARCH110' in step):
					task = TaskClass(self.client, 'CUSTOMERSEARCH', id_task)
					task.show_task(search=True)
				if(task.task):
					self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)
				# else:
				# 	self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer)

			elif('EXECUTOR999' in step):
				id_task = first_data
				task = TaskClass(self.client, 'EXECUTOR', id_task)
				self.keyboard = types.InlineKeyboardMarkup(True)
				self.keyboard.keyboard.append([{'text': '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'callback_data': 'EXECUTOR100_' + str(id_task)}])
				self.answer = 'üí£ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {} ({})'.format(font('bold', '#{} {}'.format(task.task.id, task.task.subject.name)), (task.task.more[:20] + '...') if len(task.task.more) > 20 else task.task.more)
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard)

			elif('EXECUTOR101' in step):
				id_task = first_data
				task = TaskClass(self.client, 'EXECUTOR', id_task)
				if(task.task.files.all()):
					for x in task.task.files.all():
						self.telegram_bot.send_document(self.client.chat_id, x.upload)
				else:
					answer = '–ù–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤'
					self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=answer)

			elif('EXECUTOR120' in step):
				id_task = first_data
				self.delete_dialog = True
				self.answer += '–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É'
				self.keyboard = types.InlineKeyboardMarkup(True)
				if('search' in step): search = True
				else: search = False
				self.keyboard.keyboard.append([{'text': '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', 'callback_data': search_list[search]['callback_data'] + str(id_task)}])
				self.telegram_bot.delete_message(chat_id=self.client.chat_id, message_id=message_id)
				mes = self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard)
				self.data_dialog = 'EXECUTOR120' + '|' + str(mes.message_id) + '|' + id_task + '|' + search_list[search]['postfix']

			elif('EXECUTOR130' in step):
				id_task = first_data
				self.delete_dialog = True
				self.answer = '–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫–∞–∑—á–∏–∫ —É–≤–∏–¥–∏—Ç –≤ –í–∞—à–µ–π –∑–∞—è–≤–∫–µ'
				self.keyboard = types.InlineKeyboardMarkup(True)

				if('search' in step): search = True
				else: search = False

				self.keyboard.keyboard.append([{'text': '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', 'callback_data': 'EXECUTOR120_' + id_task + search_list[search]['postfix']}])
				self.keyboard.keyboard.append([{'text': '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', 'callback_data': search_list[search]['callback_data'] + str(id_task)}])
				self.telegram_bot.delete_message(chat_id=self.client.chat_id, message_id=message_id)
				mes = self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard)
				self.data_dialog = 'EXECUTOR130' + '|' + str(mes.message_id) + '|' + id_task + '|' + search_list[search]['postfix']

			elif('EXECUTOR140' in step):
				id_task = first_data
				self.delete_dialog = True

				task = TaskClass(self.client, 'CUSTOMERSEARCH', id_task)
				task.update_feedback(action='active')

				self.delete_dialog = True
				self.quick_response('–Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ üîç', data)
				# self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)

			elif('EXECUTOR150' in step):
				id_task = first_data
				type_call = step.split('_')[2]
				task = TaskClass(self.client, 'EXECUTORSEARCH', id_task)
				task.show_task()
				if(type_call == 'inside'): task.keyboard.keyboard.append([{'text': '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', 'callback_data': 'EXECUTOR170____'}])
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)

			elif('EXECUTOR160' in step):
				id_task = first_data
				answer = step.split('_')[2]
				task = TaskClass(self.client, 'EXECUTORSEARCH', id_task)
				if(answer == 'yes'):
					task.update_feedback(action='accept')
					if(not task.state): 
						self.answer = '–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
						self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode='HTML', text=self.answer)
						return

					self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard_executor)
					self.telegram_bot.send_message(chat_id=task.chat_id, parse_mode="HTML", text=task.answer_customer, reply_markup=task.keyboard_customer)
				elif(answer == 'no'):
					task.update_feedback(action='cancel')
					if(not task.state): 
						self.answer = '–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
						self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode='HTML', text=self.answer)
						return

					self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)
					self.telegram_bot.send_message(chat_id=task.chat_id, parse_mode="HTML", text=task.answer_customer)

			elif('EXECUTOR170' in step):
				self.quick_response('–º–æ–∏ –∑–∞–∫–∞–∑—ã üë®', data)

			elif('EXECUTOR888' in step):
				self.quick_response('–Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ üîç', data)
			
			elif('EXECUTORPAGE' in step or 'CUSTOMERSEARCHPAGE' in step or 'FEEDBACKPAGE' in step or 'EXECUTORSEARCHPAGE' in step):
				page = first_data
				if('EXECUTORPAGE' in step):
					task = TaskClass(self.client, 'EXECUTOR')
					task.select_task(page=page)
				elif('EXECUTORSEARCHPAGE' in step):
					task = TaskClass(self.client, 'EXECUTORSEARCH')
					task.select_task(page=page)
				elif('CUSTOMERSEARCHPAGE' in step):
					task = TaskClass(self.client, 'CUSTOMERSEARCH')
					task.select_task(page=page)
				elif('FEEDBACKPAGE' in step):
					second_data = step.split('_')[2]
					id_task = second_data
					task = TaskClass(self.client, 'CUSTOMERSEARCH', id_task)
					task.task_feedback(page=page)
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, text=task.answer, parse_mode='HTML', reply_markup=task.keyboard)

			elif('CUSTOMERSEARCH120' in step):
				id_task = first_data
				self.delete_dialog = True
				self.answer += '‚ÄºÔ∏è –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {} –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤.\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è?\n'.format(font('bold', '—Å–±—Ä–æ—Å—è—Ç—Å—è'))
				self.answer += '{} ‚úÖ - —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n'.format(font('bold', '–î–∞'))
				self.answer += '{} ‚ùå - –Ω–∞–∂–º–∏—Ç–µ {}'.format(font('bold', '–ù–µ—Ç'), font('light', font('bold', '¬´–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå¬ª')))
				self.data_dialog = 'CUSTOMERSEARCH120' + '|' + str(message_id) + '|' + id_task
				self.keyboard = types.InlineKeyboardMarkup(True)
				self.keyboard.keyboard.append([{'text': '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', 'callback_data': 'CUSTOMERSEARCH110_' + id_task}])
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard)

			elif('CUSTOMERSEARCH130' in step):
				id_task = first_data
				self.delete_dialog = True
				task = TaskClass(self.client, 'CUSTOMERSEARCH', id_task)
				self.answer += '‚ÄºÔ∏è –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {} –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤.\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è?\n'.format(font('bold', '—Å–±—Ä–æ—Å—è—Ç—Å—è'))
				self.answer += '{} ‚úÖ - –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª\n'.format(font('bold', '–î–∞'))
				self.answer += '{} ‚ùå - –Ω–∞–∂–º–∏—Ç–µ {}'.format(font('bold', '–ù–µ—Ç'), font('light', font('bold', '¬´–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå¬ª')))
				self.data_dialog = 'CUSTOMERSEARCH130' + '|' + str(message_id) + '|' + id_task + '|first'
				self.keyboard = types.InlineKeyboardMarkup(True)
				self.keyboard.keyboard.append([{'text': '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', 'callback_data': 'CUSTOMERSEARCH110_' + id_task}])
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard)

			elif('CUSTOMERSEARCH140' in step):
				id_task = first_data
				self.delete_dialog = True
				self.callback_response({'step': 'CUSTOMERSEARCH110_' + id_task, 'message_id': message_id}, 'inside')

			elif('CUSTOMERSEARCH150' in step):
				id_task = first_data
				self.delete_dialog = True
				task = TaskClass(self.client, 'CUSTOMERSEARCH', id_task)
				task.task_feedback()
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)

			elif('CUSTOMERSEARCH160' in step):
				id_task = first_data
				buttons = []
				keyboard = types.InlineKeyboardMarkup(True)
				self.answer = '–í—ã {} —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑?'.format(font('bold', '–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ'))
				buttons.append({'text': '–î–∞ ‚úÖ', 'callback_data': 'CUSTOMERSEARCH161_' + str(id_task) + '_____'})
				buttons.append({'text': '–ù–µ—Ç ‚ùå', 'callback_data': 'CUSTOMERSEARCH110_' + str(id_task) + '____'})
				keyboard.keyboard = constructor(buttons, self.COUNT_ROW)
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=keyboard)
			
			elif('CUSTOMERSEARCH161' in step):
				id_task = first_data
				task = TaskClass(self.client, 'CUSTOMERSEARCH', id_task)
				task.delete_task()
				self.quick_response('–º–æ–∏ –∑–∞–∫–∞–∑—ã üìù', data)

			elif('CUSTOMERSEARCH170' in step):
				self.quick_response('–º–æ–∏ –∑–∞–∫–∞–∑—ã üìù', data)


		elif('SUBJECT' in step or 'CUSTOMER' in step):
			subject_id = step.split('_')[1]
			page = step.split('_')[2]
			parent_id = step.split('_')[3]
			if('SUBJECT' in step): self.answer = '{}\n{}'.format(font('bold', 'üóÇ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'), font('light', '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å'))
			elif('CUSTOMER' in step): self.answer = '{}\n{}'.format(font('bold', 'üìí –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–∫–∞–∑–∞'), font('light', '‚úè –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—Ä–µ–¥–º–µ—Ç'))
			
			print(step)
			if('100PAGE' in step):
				buttons = []
				subject_class = SubjectClass()
				obj = subject_class.subjects.filter(id=int(parent_id))[0]
				parent = subject_class.subjects.filter(next_subject=obj)
				if(not parent): parent = obj
				else: parent = parent[0]
				subjects = obj.next_subject.all()
				if(subjects):
					if('SUBJECT' in step): subject_class.generate_buttons(self.client, subjects, subject_id, page, parent.id, 'SUBJECT100')
					elif('CUSTOMER' in step): subject_class.generate_buttons(self.client, subjects, subject_id, page, parent.id, 'CUSTOMER100')
					# self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=subject_class.keyboard)
					self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=subject_class.keyboard)

			elif('100BACK' in step):
				buttons = []
				subject_class = SubjectClass()
				obj = subject_class.subjects.filter(id=int(parent_id))[0]
				parent = subject_class.subjects.filter(next_subject=obj)
				if(not parent): 
					subjects = subject_class.subjects.filter(level=obj.level)
					parent = obj
				else: 
					parent = parent[0]
					subjects = parent.next_subject.all()
				print(275,subject_id)
				print(275,parent)
				print(275,obj)
				print(275,subjects)
				if(subjects):
					if(obj.level == 1):
						if('SUBJECT' in step): subject_class.generate_buttons(self.client, subjects, subject_id, page, parent.id, 'SUBJECT100', back=True, paginator=False)
						elif('CUSTOMER' in step): subject_class.generate_buttons(self.client, subjects, subject_id, page, parent.id, 'CUSTOMER100', back=True, paginator=False)
					else:
						if('SUBJECT' in step): subject_class.generate_buttons(self.client, subjects, subject_id, page, parent.id, 'SUBJECT100', back=True)
						elif('CUSTOMER' in step): subject_class.generate_buttons(self.client, subjects, subject_id, page, parent.id, 'CUSTOMER100', back=True)

				# self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=subject_class.keyboard)
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=subject_class.keyboard)

			elif('CUSTOMER110' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				task.update_task('create')
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)
			
			elif('CUSTOMER111' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				task.update_task(action='deadline', message=subject_id)
				# self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)
				self.answer = '‚è∞ –°—Ä–æ–∫ —Å–¥–∞—á–∏ –¥–æ: {}\n'.format(font('bold', task.answer))
				self.answer += font('light', 'üìã –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ {} –∑–∞–¥–∞–Ω–∏–µ'.format(font('bold', '–æ–ø–∏—à–∏—Ç–µ')))
				self.data_dialog = 'CUSTOMER120' + '|' + str(message_id)
				self.keyboard_cancel.keyboard.append([{'text': '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', 'callback_data': 'CUSTOMER110____'}])
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard_cancel)

			elif('CUSTOMER112' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				task.calendar()
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)

			elif('CUSTOMER113' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				task.calendar(month=int(subject_id), year=int(page))
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)

			elif('CUSTOMER120' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				self.answer = '‚è∞ –°—Ä–æ–∫ —Å–¥–∞—á–∏ –¥–æ: {}\n'.format(font('bold', datetime.date(task.task.deadline)))
				self.answer += font('light','üìã –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ {} –∑–∞–¥–∞–Ω–∏–µ'.format(font('bold', '–æ–ø–∏—à–∏—Ç–µ')))
				self.data_dialog = 'CUSTOMER120' + '|' + str(message_id)
				self.keyboard_cancel.keyboard.append([{'text': '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', 'callback_data': 'CUSTOMER110____'}])
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard_cancel)

			elif('CUSTOMER130' in step):
				task = TaskClass(self.client)
				task.task.files.clear()
				self.delete_dialog = True
				self.answer = 'üìã –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {}\n'.format(font('bold',task.task.more))
				self.answer += font('light', 'üìé –ü—Ä–∏—à–ª–∏—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ {}, –∫–∞—Å–∞—é—â–∏–µ—Å—è –∑–∞–¥–∞–Ω–∏—è. –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å —Ñ–∞–π–ª—ã –∏/–∏–ª–∏ —Ñ–æ—Ç–æ'.format(font('bold', '–º–∞—Ç–µ—Ä–∏–∞–ª—ã')))
				self.data_dialog = 'CUSTOMER130' + '|' + str(message_id)
				self.keyboard_cancel.keyboard.append([{'text': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'callback_data': 'CUSTOMER140____'}])
				self.keyboard_cancel.keyboard.append([{'text': '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', 'callback_data': 'CUSTOMER120____'}])
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard_cancel)
			
			elif('CUSTOMER140' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				task.check_task()
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)

			elif('CUSTOMER150' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				task.create()
				self.answer = font('bold', '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –ø–æ–º–æ—â–Ω–∏–∫–∏ —É–∂–µ –∏–∑—É—á–∞—é—Ç –≤–∞—à –∑–∞–∫–∞–∑ üîé#{}\n'.format(task.task.id))
				self.answer += font('light', 'üëá –ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –≤ {}'.format(font('bold', '¬´–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìù¬ª')))
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer)

			elif('CUSTOMER160' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				task.show_feedback(subject_id)
				if(page == 'inside'): task.keyboard.keyboard.append([{'text': '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', 'callback_data': 'CUSTOMERSEARCH150_' + str(task.task.id)}])
				else: task.keyboard.keyboard.append([{'text': '–°–∫—Ä—ã—Ç—å', 'callback_data': 'CUSTOMER190_' + subject_id + '____'}])
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)

			elif('CUSTOMER170' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				task.payment_feedback(subject_id)
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)

			elif('CUSTOMER171' in step):
				buttons = []
				keyboard = types.InlineKeyboardMarkup(True)
				self.answer = '–í—ã {} —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É?'.format(font('bold', '–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ'))
				buttons.append({'text': '–î–∞ ‚úÖ', 'callback_data': 'CUSTOMER172_' + str(subject_id) + '_____'})
				buttons.append({'text': '–ù–µ—Ç ‚ùå', 'callback_data': 'CUSTOMER160_' + str(subject_id) + '_inside___'})
				keyboard.keyboard = constructor(buttons, self.COUNT_ROW)
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=keyboard)

			elif('CUSTOMER172' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				task.refuse_feedback(subject_id)
				if(task.state):
					self.telegram_bot.send_message(chat_id=task.feedback.client.chat_id, parse_mode="HTML", text=task.answer)
					self.callback_response({'step': 'CUSTOMERSEARCH150_' + str(task.feedback.task.id), 'message_id': message_id}, 'inside')
				else:
					self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer)

			elif('CUSTOMER180' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				task.accept_feedback(subject_id)
				if(task.state):
					if('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ' in task.answer):
						self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=task.answer)
						self.quick_response('–º–æ–π –±–∞–ª–∞–Ω—Å üí∞')
					else:
						self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer)
				else:
					self.answer = '–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
					self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode='HTML', text=self.answer)

			elif('CUSTOMER190' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				task.preview_feedback(subject_id)
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)

			elif('CUSTOMER200' in step):
				self.delete_dialog = True
				self.keyboard = types.InlineKeyboardMarkup(True)
				self.keyboard.keyboard.append([{'text': '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', 'callback_data': 'CUSTOMER160_' + str(subject_id) + '_____'}])
				self.answer = '{}\n{} {}'.format(font('bold', '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'), font('light', '–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ —Ç–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –Ω–∞–∂–º—ë—Ç–µ'), font('bold', '¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å üì®¬ª'))
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=self.keyboard)
				self.data_dialog = 'CUSTOMER200' + '|' + str(message_id) + '|' + subject_id + '|' + page

			elif('CUSTOMER210' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				task.send_message(subject_id, page)
				self.telegram_bot.send_message(chat_id=task.chat_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)
				if(page == 'executor'):
					self.callback_response({'step': 'CUSTOMER160_' + str(subject_id) + '_____', 'message_id': message_id}, 'inside')
					self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
				else:
					self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

			elif('CUSTOMER888' in step):
				self.delete_dialog = True
				task = TaskClass(self.client)
				if(page == 'customer'): 
					self.callback_response({'step': 'CUSTOMER160_' + str(subject_id) + '_____', 'message_id': message_id}, 'inside')
					return
				elif(page == 'executor'): task.send_message(subject_id, page, 'inside')
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode='HTML', text=task.answer, reply_markup=task.keyboard)

			elif('SUBJECT100' in step or 'CUSTOMER100' in step):
				buttons = []
				keyboard = ''
				subject_class = SubjectClass()
				obj = subject_class.subjects.filter(id=int(subject_id))[0]
				parent = subject_class.subjects.filter(next_subject=obj)
				if(not parent): parent = obj
				else: parent = parent[0]
				subjects = obj.next_subject.all()
				if(subjects):
					if('SUBJECT' in step): subject_class.generate_buttons(self.client, subjects, subject_id, 1, parent.id, 'SUBJECT100')
					elif('CUSTOMER' in step): subject_class.generate_buttons(self.client, subjects, subject_id, 1, parent.id, 'CUSTOMER100')
					keyboard = subject_class.keyboard
				else:
					if('SUBJECT' in step):
						subject_class.update_filter(self.client, obj)
						subject_class.generate_buttons(self.client, subject_class.subjects.filter(next_subject=obj)[0].next_subject.all(), subject_id, page, parent.id, 'SUBJECT100')
						keyboard = subject_class.keyboard
					elif('CUSTOMER' in step): 
						task = TaskClass(self.client)
						task.update_task('create', subject=obj)
						self.answer = task.answer
						keyboard = task.keyboard
				# self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=subject_class.keyboard)
				self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=keyboard)

		if(self.telegram_bot.get_me().username == 'ShpargalochkaCab_bot'):
			if('CABINET' in step):
				task = TaskClass(self.client, 'CABINET')
				cabinet_id = step.split('_')[1]
				cabinet = Cabinet.objects.filter(id=cabinet_id)[0]
				if('CABINET100' in step):
					# task = TaskClass(self.client, 'CABINET')
					task.task_active(cabinet_id)
					if(task.state):
						if(task.answer): self.telegram_bot.send_message(chat_id=task.chat_id, text=task.answer, parse_mode='HTML')
						task.task_list()
						self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, text=task.answer, parse_mode='HTML', message_id=message_id, reply_markup=task.keyboard)
					else:
						self.answer = '–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
						self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode='HTML', text=self.answer)

					return

				if(task.task):
					print(task.task.id, cabinet.task.id)
					if(task.task.id != cabinet.task.id):
						self.answer = '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç —Å –∑–∞–∫–∞–∑–æ–º ' + font('bold', '#{}'.format(cabinet.task.id))
						self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML')
						return
					if('CABINET110' in step):
						task.exit_cabinet(step.split('_')[2])
						if(task.state):
							self.telegram_bot.delete_message(chat_id=self.client.chat_id, message_id=message_id)
							if(step.split('_')[2] == 'no'):
								self.telegram_bot.send_message(chat_id=task.chat_id, text=task.answer, parse_mode='HTML')
						else:
							self.answer = '–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
							self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode='HTML', text=self.answer)

					elif('CABINET12' in step):
						if('CABINET121' in step):
							task.task_grade(type_grade='one', ball=step.split('_')[3], role=step.split('_')[2])
							if(not task.state):
								return
							task.get_type_grade(cabinet_id=cabinet_id, type_grade='two', role=step.split('_')[2])
							self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, text=task.answer, parse_mode='HTML', message_id=message_id, reply_markup=task.keyboard)

						elif('CABINET122' in step):
							task.task_grade(type_grade='two', ball=step.split('_')[3], role=step.split('_')[2])
							if(not task.state):
								return
							task.get_type_grade(cabinet_id=cabinet_id, type_grade='three', role=step.split('_')[2])
							self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, text=task.answer, parse_mode='HTML', message_id=message_id, reply_markup=task.keyboard)

						elif('CABINET123' in step):
							task.task_grade(type_grade='three', ball=step.split('_')[3], role=step.split('_')[2])
							if(not task.state):
								return
							task.get_type_grade(cabinet_id=cabinet_id, type_grade='four', role=step.split('_')[2])
							self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, text=task.answer, parse_mode='HTML', message_id=message_id, reply_markup=task.keyboard)

						elif('CABINET124' in step):
							task.task_grade(type_grade='four', ball=step.split('_')[3], role=step.split('_')[2])
							if(not task.state):
								return
							task.get_type_grade(cabinet_id=cabinet_id, type_grade='two', role=step.split('_')[2])
							self.answer = '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É, –∫–∞–∫–æ–π ' + font('bold', '–æ—Ç–∑—ã–≤') + ' –≤—ã –±—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ –ø–æ–º–æ—â–Ω–∏–∫–µ?'
							self.keyboard = types.InlineKeyboardMarkup(True)
							self.keyboard.keyboard.append([{'text': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'callback_data': 'CABINET125_{}_{}'.format(cabinet_id, step.split('_')[2])}])
							self.data_dialog = 'CABINET125' + '|' + str(message_id) + '|' + step.split('_')[2] + '|' + str(task.task.id)
							self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', message_id=message_id, reply_markup=self.keyboard)

						elif('CABINET125' in step):
							self.delete_dialog = True
							role = step.split('_')[2]
							task.task_finish(role)
							self.answer = font('bold', '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!üéâüéâüéâ\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑!\n')
							self.answer += '–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∏–º–µ–Ω–Ω–æ –∫ –Ω–∞–º!'
							self.answer += font('light', ' –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∏–¥–µ–∏, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å, –ø–∏—à–∏—Ç–µ @Viktor_Rachuk')
							self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', message_id=message_id)
				else:
					task.task_list()
					if(task.keyboard.keyboard):
						text = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É'
						self.telegram_bot.send_message(chat_id=self.client.chat_id, text=text, parse_mode='HTML', reply_markup=task.keyboard)
					else:
						text = '–ó–∞–¥–∞—á –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
						self.telegram_bot.send_message(chat_id=self.client.chat_id, text=text, parse_mode='HTML')


	def pending_response(self, message):
		if('USER' in self.dialog.data):
			step = self.dialog.data.split('|')[0]
			message_id = self.dialog.data.split('|')[1]
			if(step == 'USER100'):
				if(not self.len_string(message, 50)):
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
					return

				self.client.name = message
				self.client.save(update_fields=['name'])

			elif(step == 'USER101'):
				if(not self.len_string(message, 50)):
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
					return

				self.client.city = message
				self.client.save(update_fields=['city'])

			elif(step == 'USER102'):
				if(not self.len_string(message, 255)):
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
					return

				self.client.more = message
				self.client.save(update_fields=['more'])

			elif(step == 'USER103'):
				if(not self.len_string(message, 255)):
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
					return

				self.client.withdraw = message
				self.client.save(update_fields=['withdraw'])

			self.user.card_raiting()
			self.answer = '{}\n–ò–º—è: {}\n–°—Ç—Ä–∞–Ω–∞: {}\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –º–Ω–µ: {}\n–ö—É–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä-–≤–∞: {}\nüíé–†–µ–π—Ç–∏–Ω–≥: {} ({})\nüèÜ–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–±–æ—Ç: {}\n'.format(
							font('bold', 'üî•–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ üî•'),
							font('bold', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if not self.client.name else self.client.name),
							font('bold', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if not self.client.city else self.client.city),
							font('bold', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if not self.client.more else self.client.more),
							font('bold', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if not self.client.withdraw else self.client.withdraw),
							font('bold', self.user.star),
							font('bold', self.user.assessment),
							font('bold', self.user.count_work)
						)

			self.answer += font('light', '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏\n–ù–∞–∂–º–∏—Ç–µ {}, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ'.format(font('bold', '¬´‚Äé–ü—Ä–∏–º–µ–Ω–∏—Ç—å¬ª')))

			# telegram_bot.edit_message_reply_markup(chat_id=self.client.chat_id, message_id=self.dialog.data, parse_mode="HTML", text=self.answer)
			buttons = []
			keyboard = types.InlineKeyboardMarkup(True)
			buttons.append({'text': '–ü—Ä–∏–º–µ–Ω–∏—Ç—å', 'callback_data': 'USER777'})
			keyboard.keyboard = constructor(buttons, self.COUNT_ROW)

			self.telegram_bot.delete_message(chat_id=self.client.chat_id, message_id=message_id)
			# self.telegram_bot.edit_message_text(chat_id=self.client.chat_id, message_id=message_id, parse_mode="HTML", text=self.answer, reply_markup=keyboard)
			mes = self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=self.answer, reply_markup=keyboard)
			self.data_dialog = step + '|' + str(mes.message_id)
			self.delete_dialog = True
		
		elif('BALANCE' in self.dialog.data):
			step = self.dialog.data.split('|')[0]
			message_id = self.dialog.data.split('|')[1]

			if(not self.isfloat(message)):
				self.answer = '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ'
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
				return

			if(step == 'BALANCE100'):
				if(not self.between(message, 10, 5000)):
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
					return

				self.delete_dialog = True
				self.user.take_pay(message)
				# self.answer = '–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–æ—Ç–æ–≤–∞ (—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã), –Ω–∞–∂–º–∏—Ç–µ <a href="#">–û–ø–ª–∞—Ç–∏—Ç—å</a> –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n'.format(self.user.order.token)
				self.answer = '–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–æ—Ç–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ <a href="#">–û–ø–ª–∞—Ç–∏—Ç—å</a> –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n'.format(self.user.order.token)
				self.answer += font('light', '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç –Ω–∞ —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã.')

			elif(step == 'BALANCE101'):
				if(not self.between(message, 100, 10000)):
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
					return

				if(self.client.balance < float(message)):
					self.answer = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
					return

				self.delete_dialog = True
				self.user.give_pay(message)
				self.answer = '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥: ‚Ññ{} —Å–æ–∑–¥–∞–Ω–∞\n–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—É—Ö –¥–Ω–µ–π\n–û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞: {} –≥—Ä–Ω'.format(self.user.order.id, message if message else '0')
				self.telegram_bot.delete_message(chat_id=self.client.chat_id, message_id=message_id)

			elif(step == 'BALANCE121'):
				if(not self.len_string(message, 100)):
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
					return

				self.delete_dialog = True
				if(not self.client.refer):
					self.user.referal(message)
					self.telegram_bot.delete_message(chat_id=self.client.chat_id, message_id=message_id)
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.user.answer)
				else:
					self.answer = '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º'
					self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode='HTML', text=self.answer)

				return
			self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=self.answer, disable_web_page_preview=True)

		elif('CUSTOMER' in self.dialog.data):
			step = self.dialog.data.split('|')[0]
			message_id = self.dialog.data.split('|')[1]
			if('CUSTOMER120'  in self.dialog.data):
				if(not self.len_string(message, 200)):
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
					return

				task = TaskClass(self.client)
				task.update_task(action='description', message=message)
				self.callback_response({'step': 'CUSTOMER130____', 'message_id': message_id}, 'inside')
				self.delete_dialog = True

			elif('CUSTOMERSEARCH120' in self.dialog.data):
				step = self.dialog.data.split('|')[0]
				message_id = self.dialog.data.split('|')[1]
				id_task = self.dialog.data.split('|')[2]

				task = TaskClass(self.client, 'CUSTOMERSEARCH', id_task)
				task.update_task(action='description', message=message)
				self.callback_response({'step': 'CUSTOMERSEARCH110_' + id_task, 'message_id': message_id}, 'inside')
				self.delete_dialog = True

			elif('CUSTOMER200' in self.dialog.data):
				step = self.dialog.data.split('|')[0]
				message_id = self.dialog.data.split('|')[1]
				id_feedback = self.dialog.data.split('|')[2]
				sender = self.dialog.data.split('|')[3]

				self.keyboard = types.InlineKeyboardMarkup(True)
				task = TaskClass(self.client, 'CUSTOMERSEARCH')
				if(sender == 'customer'): task.create_message(id_feedback, 'executor', message)
				elif(sender == 'executor'): task.create_message(id_feedback, 'customer', message)
				self.telegram_bot.delete_message(chat_id=self.client.chat_id, message_id=message_id)
				mes = self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)
				self.data_dialog = 'CUSTOMER200' + '|' + str(mes.message_id) + '|' + id_feedback + '|' + sender
				self.delete_dialog = True

		elif('EXECUTOR120' in self.dialog.data):
			step = self.dialog.data.split('|')[0]
			message_id = self.dialog.data.split('|')[1]
			id_task = self.dialog.data.split('|')[2]

			if(not self.isfloat(message)):
				self.answer = '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ'
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
				return

			if(not self.between(message, 10, 10000)):
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
				return

			if('search' in self.dialog.data): search = True
			else: search = False
			task = TaskClass(self.client, 'CUSTOMERSEARCH', id_task)
			task.update_feedback(action='create+price', message=message)
			self.callback_response({'step': 'EXECUTOR130_' + id_task + search_list[search]['postfix'], 'message_id': message_id}, 'inside')

		elif('EXECUTOR130' in self.dialog.data):
			step = self.dialog.data.split('|')[0]
			message_id = self.dialog.data.split('|')[1]
			id_task = self.dialog.data.split('|')[2]

			if(not self.len_string(message, 200)):
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
				return

			task = TaskClass(self.client, 'CUSTOMERSEARCH', id_task)
			if('search' in self.dialog.data): search = True
			else: search = False

			task.update_feedback(action='question', message=message, search=search)
			self.delete_dialog = True
			self.telegram_bot.delete_message(chat_id=self.client.chat_id, message_id=message_id)
			self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)

		elif('CABINET125' in self.dialog.data):
			message_id = self.dialog.data.split('|')[1]
			role = self.dialog.data.split('|')[2]
			id_task = self.dialog.data.split('|')[3]
			if(not self.len_string(message, 500)):
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML', reply_markup=self.keyboard_cancel)
				return
			
			task = TaskClass(self.client, 'CABINET')
			if(int(id_task) != task.task.id):
				self.answer = '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç —Å –∑–∞–¥–∞—á–µ–π ‚Ññ{}'.format(id_task)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, text=self.answer, parse_mode='HTML')
				return

			task.task_review(message=message, role=role)
			self.delete_dialog = True
			self.callback_response({'step': 'CABINET125_' + str(task.cabinet.id) + '_' + role, 'message_id': message_id}, 'inside')
		

	def file_response(self, data, type_file):
		if(self.telegram_bot.get_me().username == 'Shpargalochka_bot'):
			if(self.dialog.data):
				if(type_file == 'photo'):
					file_info = self.telegram_bot.get_file(data.photo[-1].file_id)
					file_name = file_info.file_path.split('/')[1]
				else:
					file_info = self.telegram_bot.get_file(data.document.file_id)
					file_name = data.document.file_name

				print(self.dialog.data)
				message_id = self.dialog.data.split('|')[1]
				downloaded_file = self.telegram_bot.download_file(file_info.file_path)
				if('CUSTOMERSEARCH130' in self.dialog.data):
					id_task = self.dialog.data.split('|')[2]
					task = TaskClass(self.client, 'CUSTOMERSEARCH', id_task)
					if('first' in self.dialog.data):
						task.task.files.clear()
						task.task.save()
						self.dialog.data = self.dialog.data.replace('|first', '')
						self.dialog.save(update_fields=['data'])
				elif('CUSTOMER130' in self.dialog.data):
					task = TaskClass(self.client, 'CUSTOMERCREATE')
				task.update_task(action='files', message=downloaded_file, file_name=file_name)
				self.telegram_bot.send_message(chat_id=self.client.chat_id, parse_mode="HTML", text=task.answer, reply_markup=task.keyboard)
		elif(self.telegram_bot.get_me().username == 'ShpargalochkaCab_bot'):
			task = TaskClass(self.client, 'CABINET')
			if(task.task):
				self.user.role_task()
				if(self.user.role == 'customer'): cabinet = Cabinet.objects.filter(task=task.task, role='executor')
				elif(self.user.role == 'executor'): cabinet = Cabinet.objects.filter(task=task.task, role='customer')

				if(type_file == 'photo'):
					file_info = self.telegram_bot.get_file(data.photo[-1].file_id)
					file_name = file_info.file_path.split('/')[1]
				else:
					file_info = self.telegram_bot.get_file(data.document.file_id)
					file_name = data.document.file_name

				print(file_info.file_path)
				downloaded_file = self.telegram_bot.download_file(file_info.file_path)
				with open("#" + file_name, "wb") as f:
					f.write(downloaded_file)
				reopen = open("#" + file_name, "rb")
				django_file = File(reopen)
				file = Files.objects.create(upload=django_file)
				cabinet_i = Cabinet.objects.filter(task=task.task, client=self.client)
				
				if(not cabinet[0].active):
					Cabinetmessage.objects.create(cabinet_record=cabinet_i[0], file=file, state=True)
					from astudy.settings import ASTUDY_TOKEN
					astudy = telebot.TeleBot(ASTUDY_TOKEN)
					answer = 'üîî –£ –í–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É {}\n'.format(font('bold', '#{} {}'.format(cabinet[0].task.id, cabinet[0].task.subject.name)))
					answer += font('light', '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ') + font('bold', '¬´–ö–∞–±–∏–Ω–µ—Ç¬ª ') + font('light', '–∏ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –µ–≥–æ')
					keyboard = types.InlineKeyboardMarkup(True)
					keyboard.keyboard.append([{'text': '–ö–∞–±–∏–Ω–µ—Ç', 'url': '#'}])
					astudy.send_message(chat_id=cabinet[0].client.chat_id, text=answer, parse_mode='HTML', reply_markup=keyboard)
				else:
					if(type_file == 'photo'):
						self.telegram_bot.send_photo(chat_id=cabinet[0].client.chat_id, photo=data.photo[-1].file_id)
					else:
						self.telegram_bot.send_document(cabinet[0].client.chat_id, data.document.file_id)

					Cabinetmessage.objects.create(cabinet_record=cabinet_i[0], file=file)

				os.remove("#" + file_name)

			else:
				task.task_list()
				if(task.keyboard.keyboard):
					text = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É'
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=text, parse_mode='HTML', reply_markup=task.keyboard)
				else:
					text = '–ó–∞–¥–∞—á –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
					self.telegram_bot.send_message(chat_id=self.client.chat_id, text=text, parse_mode='HTML')